// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0
// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ 
// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
// =========================================================================================================

vec3 getCam(vec3 rd, vec2 uv)
{
    float fov = 4.5;
    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));
    vec3 u = normalize(cross(rd, r));
    return normalize(rd+fov*(uv.x*r+-uv.y*u));
}

vec2 _min(vec2 a, vec2 b)
{
    if (a.x < b.x)
        return a;
    return b;
}

float _cucube(vec3 p, vec3 s, vec3 th)
{
    vec3 l = abs(p)-s;
    float cube = max(max(l.x, l.y), l.z);
    l = abs(l)-th;
    float x = max(l.y, l.z);
    float y = max(l.x, l.z);
    float z = max(l.x, l.y);
    
    return max(min(min(x, y), z), cube);
}

vec2 map(vec3 p)
{
    vec2 acc = vec2(10000.);
    for (int i = 0; i < 15; ++i)
    {
        float fi = float(i);
        vec3 pl = p;
        pl.xy *= r2d(sin(iTime*.5-fi*.1)*2.);   
        float cucube = _cucube(pl, 5.*vec3(.5, .1, .5)*(fi/15.), vec3(.0001));
        acc = _min(acc, vec2(cucube, float(i)));
    }
    
    return acc;
}
vec3 grad(float f)
{
    vec3 cols[4];
    cols[0] = vec3(0.05);
    cols[1] = vec3(0.859,0.039,0.286);
    cols[2] = vec3(1.);
    cols[3] = vec3(1.0);
    
    
    f = pow(sat(sin(f*3.-iTime*1.5)*.5+.5), 2.)*3.0;
    vec3 prev = cols[int(f)];
    vec3 next = cols[int(min(f+1.,3.))];
    return mix(prev, next, fract(f))*1.2;
}
vec3 getCol(float id)
{
    return grad(id/15.);
}

vec3 accCol;
vec3 trace(vec3 ro, vec3 rd, int steps)
{
    accCol = vec3(0.);
    vec3 p = ro;
    for (int i = 0; i < steps; ++i)
    {
        vec2 res = map(p);
        if (res.x < 0.01)
            return vec3(res.x, distance(p, ro), res.y);
        accCol += pow(1.-sat(res.x/.3),5.)*.07*getCol(res.y).yzx;
        p+= rd*res.x;
    }
    vec3(-1.);
}

vec3 rdr(vec2 uv)
{
    float d = 3.;
    vec3 ro = vec3(sin(iTime*.25)*d,0.,cos(iTime*.25)*d);
    vec3 ta = vec3(0.,0.,0.);
    vec3 rd = normalize(ta-ro);
    rd = getCam(rd, uv);
    vec3 col = texture(iChannel2, rd*vec3(1.,1.,1.)).xxx*.25*vec3(0.400,0.643,0.961);
    vec3 res = trace(ro, rd, 48);
    if (res.y > 0.)
    {
        vec3 p = ro + rd*res.y;

        col = getCol(res.z);
    }
    col += accCol;
    return col;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 ouv = fragCoord/iResolution.xy;
    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;

    vec3 col = rdr(uv);

    col = mix(col, texture(iChannel1, ouv).xyz, .5);

    fragColor = vec4(col,1.0);
}