// Fork of "tunnelzefzef" by z0rg. https://shadertoy.com/view/stV3zt
// 2021-12-11 16:08:54


#define sat(a) clamp(a,0.,1.)
mat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c,-s,s,c);}
#define PI 3.14159265

float _sqr(vec2 p, vec2 s)
{
  vec2 l = abs(p)-s;
  return max(max(l.x,l.y),sin(p.y*10.*sin(iTime*.25)+.5));
}

vec2 _min(vec2 a, vec2 b)
{
  if(a.x<b.x)
    return a;
  return b;
}

vec2 map(vec3 p)
{
  vec2 acc = vec2(1000.,-1.);

  vec3 op = p;
  float rep = 1.;
//p.z+=time;
float id = floor((p.z+rep*.5)/rep);
  p.z = mod(p.z+rep*.5,rep)-rep*.5;
vec2 sz = vec2(5.+sin(id*.4+iTime)*.5,.5+.3*sin(iTime+p.z));
  //p.xy *=r2d(PI*.25);
//  id = sin(id)*10.;
  float shape = max((abs(_sqr(p.xy*r2d(id*1.57),
    vec2(sz)))-.1),
     abs(p.z)-.2);
  acc = _min(acc, vec2(shape, 0.));


  return acc;
}

vec3 getCam(vec3 rd, vec2 uv)
{
  float fov = 2.;
  vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));
  vec3 u = normalize(cross(rd, r));
  return normalize(rd+fov*(r*uv.x+u*uv.y));
}

vec3 getNorm(vec3 p, float d)
{
  vec2 e = vec2(0.01,.0);
  return normalize(vec3(d)-vec3(map(p-e.xyy).x,
    map(p-e.yxy).x,
    map(p-e.yyx).x));
}
vec3 accCol;
vec3 trace(vec3 ro, vec3 rd, int steps)
{
  accCol = vec3(0.);
  vec3 p = ro;
  for (int i = 0; i<steps && distance(p, ro) < 15.;++i)
{
    vec2 res = map(p);
    if (res.x < 0.01)
      return vec3(res.x,distance(p,ro), res.y);
    accCol +=vec3(1.,sin(p.z)*.5+.5,.5)
    *(1.-sat(res.x/.7))*.015;
    p += rd*res.x*.25;
  }
  return vec3(-1.);
}

vec3 rdr(vec2 uv)
{
  vec3 col = vec3(0.);

  float z = iTime*10.;
  vec3 ro = vec3(0.,0.,z+-5.);
  vec3 ta = vec3(0.,0.,z);
  vec3 rd = normalize(ta-ro);
  rd = getCam(rd,uv);

  vec3 res = trace(ro, rd, 12864);
  if (res.y >0.)
  {
    vec3 p = ro+rd*res.y;
    vec3 n = getNorm(p, res.x);
    float dt = dot(n, vec3(0.,0.,1));
    if (abs(dt)<0.1)
      col = n*.5+.5;
    else
      col = vec3(.2);
  }
  col+=accCol;
  col.xy *=r2d(iTime);
  col.xy = abs(col.xy);
col = col.xxx;
col *= mix(vec3(1.),vec3(1.,.2,.3),
  1.-sat((abs(uv.x)-.1)*400.));
  return col;
}


void mainImage( out vec4 fragColor, in vec2 fragCoord ){
  vec2 uv = (fragCoord.xy-.5*iResolution.xy)/
    iResolution.xx;
    uv*= 1.-length(uv)*.5;
  vec3 col = rdr(uv*1.);


  col *= 1.-sat((abs(uv.y)-.3)*400.);
  //for (int i = 0; i<4;++i)
    //col += rdr(uv*(1.-.5*float(i)/4.))*.1;
  fragColor = vec4(col, 1.0);
}