// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0
// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ 
// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
// =========================================================================================================

#define sat(a) clamp(a, 0., 1.)

float hash11(float p)
{
    p = fract(p * .1031);
    p *= p + 33.33;
    p *= p + p;
    return fract(p);
}
float seed;
float rand()
{
    seed++;
    return hash11(seed);
}

mat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }

vec3 getCam(vec3 rd, vec2 uv)
{
    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));
    vec3 u = normalize(cross(rd, r));
    return normalize(rd+r*uv.x+u*uv.y);
}

float _rsqr(vec2 uv, vec2 s, float r)
{
    vec2 l = abs(uv)-s;
    return min(length(max(l, 0.)+min(max(l.x, l.y), 0.))-r, max(l.x, l.y));
}

float _cube(vec3 p, vec3 s)
{
    vec3 l = abs(p)-s;
    l = abs(l)-s*.3;
    return max(l.x, max(l.y, l.z));
}

float _sqr(vec2 uv, vec2 s)
{
    vec2 l = abs(uv)-s;
    return max(l.x, l.y);
}

vec2 _min(vec2 a, vec2 b)
{
    if (a.x < b.x)
        return a;
    return b;
}

vec2 map(vec3 p)
{
    vec2 acc = vec2(1000.,-1.);
    
    float tunnel = -_rsqr(p.xy, vec2(3., 1.), .4);
    tunnel = max(tunnel, abs(p.z)-10.);
    acc = _min(acc, vec2(tunnel, 0.));
    
    vec3 pc1 = p-vec3(sin(iTime*.5),.4*sin(iTime),8.+2.*sin(iTime*1.5));
    pc1.xy *= r2d(iTime+sin(iTime*.2));
    pc1.xz *= r2d(-iTime*.5);
    float cubes = _cube(pc1, vec3(.4));
    
    acc = _min(acc, vec2(cubes, 1.));
    return acc;
}

vec3 getNorm(vec3 p, float d)
{
    vec2 e = vec2(0.01, 0.);
    return normalize(vec3(d)-vec3(map(p+e.xyy).x, map(p+e.yxy).x, map(p+e.yyx).x));
}

vec3 trace(vec3 ro, vec3 rd, int steps)
{
    vec3 p = ro;
    for (int i = 0; i< steps; ++i)
    {
        vec2 res = map(p);
        if (res.x < 0.01)
            return vec3(res.x, distance(p, ro), res.y);
        p+= rd*res.x;
    }
    return vec3(-1.);
}

vec3 getEnv(vec3 rd)
{
    return 2.*texture(iChannel0, rd*vec3(1.,-1.,1.)*vec3(15.,15.,1.)+vec3(0.,.5,0.)).xyz*vec3(0.357,0.745,0.565);
}

vec3 rdr(vec2 uv)
{
    vec3 col = vec3(0.);
    
    vec3 off = (vec3(rand(),rand(),rand())-.5)*2.;
    vec3 ro = vec3(sin(iTime*.2),1.3,-5.)+off*.005;
    vec3 ta = vec3(0.,1.1,6.);
    vec3 rd = normalize(ta-ro);
    rd = getCam(rd, uv);
    rd = normalize(rd-off*.001);
    vec3 res = trace(ro,rd, 256);
    if (res.y > 0.)
    {
        vec3 p = ro +rd*res.y;
        vec3 n = getNorm(p, res.x);
        if (res.z  == 0.)
        {
            vec2 uvt = vec2(atan(p.y, p.x)*7., p.z);
        
            vec2 rep = vec2(.5);
            uvt = mod(uvt+rep*.5,rep)-rep*.5;
            float carrelage = _sqr(uvt, vec2(.2));
            vec3 tng = normalize(cross(rd, n));
            n = normalize(n+tng*sat(carrelage*10.)*.5+texture(iChannel1, 3.*p.xy*vec2(1.,10.)).xxx*.05);
            n = normalize(n+(vec3(rand(),rand(), rand())-.5)*.05);
            vec3 rdrefl = normalize(reflect(rd, n));
            vec3 resrefl = trace(p-n*0.01, rdrefl, 128);
            if (resrefl.y > 0.)
            {
                col = vec3(0.075,0.427,0.427)*(1.-sat(carrelage))*.5
                *(1.-sat(length(uv*1.)));
            }
            else
                col = getEnv(rdrefl);
        } 
    }
    else
        col = getEnv(rd);
    
    col = mix(col, vec3(0.894,0.969,0.631), pow(sat(length(col)), 25.));
    return col;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;
    seed=texture(iChannel1,uv).x;
    seed+=fract(iTime);
    vec3 col = rdr(uv);
    col = mix(col, texture(iChannel2, fragCoord/iResolution.xy).xyz, .75);
    fragColor = vec4(col,1.0);
}